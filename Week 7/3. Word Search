class Solution {
public:

    bool DFS(vector<vector<char>>& board, string &word, int i, int j, vector<vector<bool>>&visited, vector<vector<int>>&dir, int windex){
        //if we reach end of string that means string matched
        if(windex>=word.size())
            return true;

        //if it is already visited or String become unmatched
        if(visited[i][j] || word[windex]!=board[i][j])
            return false;

        visited[i][j] = true;

        //call for all the 4 directions
        for(int k=0;k<dir.size();k++){
            int newRow = i+dir[k][0];
            int newCol = j+dir[k][1];

            if(!(newRow<0 || newRow>=board.size() || newCol<0 || newCol>=board[0].size())){
                //if already found then return else continue finding
                if(DFS(board,word,newRow, newCol, visited, dir, windex+1))
                    return true;
            }
        }

        // Backtrack
        visited[i][j] = false;
        return false;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int i, j;
        vector<vector<bool>> visited(board.size(), vector<bool>(board[0].size(), false));
        vector<vector<int>>dir = {{-1,0},{0,1},{1,0},{0,-1}};
        bool find = false;
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[i].size();j++){
                if(board[i][j]==word[0]){ //find where is the first matched letter
                    if(word.size()==1) //if there is only 1 letter in string
                        return true;
                    if(DFS(board, word, i, j, visited, dir, 0)) //if find return true
                        return true;

                    //else find some other digit in board that is equal to word[0]
                }
            }
        }

        return false;
    }
};
