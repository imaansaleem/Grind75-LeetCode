class Solution {
public:
vector<vector<int>> floodFill(vector<vector<int>> &image, int sr, int sc, int newColor) {
    vector<vector<int>> g = image;
    queue<pair<int, int>> q;
    pair<int, int> current_vertex;
    vector<vector<int>> visited(image.size());
    
    for(int i = 0; i < image.size(); i++){
        for(int j = 0; j < image[0].size(); j++){
            visited[i].push_back(0); //initially all are unvisited
        }
    }

    q.push(make_pair(sr,sc));
    image[sr][sc] = newColor;
    visited[sr][sc] = 1;
    while (!q.empty()) {
        current_vertex = q.front();
        q.pop();

        if(current_vertex.first-1 >=0 && g[current_vertex.first-1][current_vertex.second] == g[current_vertex.first][current_vertex.second] && visited[current_vertex.first-1][current_vertex.second]==0) { //uper cell is same and is not visited
            q.push(make_pair(current_vertex.first-1, current_vertex.second));
            visited[current_vertex.first-1][current_vertex.second]=1;
            image[current_vertex.first-1][current_vertex.second] = newColor;
        }

        if(current_vertex.second+1 <image[0].size() && g[current_vertex.first][current_vertex.second+1] == g[current_vertex.first][current_vertex.second] && visited[current_vertex.first][current_vertex.second+1]==0) { //right cell is same and is not visited
            q.push(make_pair(current_vertex.first, current_vertex.second+1));
            visited[current_vertex.first][current_vertex.second+1]=1;
            image[current_vertex.first][current_vertex.second+1] = newColor;
        }

        if(current_vertex.first+1 <image.size() && g[current_vertex.first+1][current_vertex.second] == g[current_vertex.first][current_vertex.second] && visited[current_vertex.first+1][current_vertex.second]==0) { //down cell is same and is not visited
            q.push(make_pair(current_vertex.first+1, current_vertex.second));
            visited[current_vertex.first+1][current_vertex.second]=1;
            image[current_vertex.first+1][current_vertex.second] = newColor;
        }

        if(current_vertex.second-1 >=0 && g[current_vertex.first][current_vertex.second-1] == g[current_vertex.first][current_vertex.second] && visited[current_vertex.first][current_vertex.second-1]==0) { //left cell is same and is not visited
            q.push(make_pair(current_vertex.first, current_vertex.second-1));
            visited[current_vertex.first][current_vertex.second-1]=1;
            image[current_vertex.first][current_vertex.second-1] = newColor;
        }
    }
    return image;
}

};
