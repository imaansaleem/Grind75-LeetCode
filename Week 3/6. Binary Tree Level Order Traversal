/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    vector<vector<int>> levelOrder(TreeNode* root) {
    vector<vector<int>> ans;
    
    if (root == nullptr) {
        return ans;  // Return an empty vector since the tree is empty.
    }
    
    queue<TreeNode*> q;
    q.push(root);
    
    while (!q.empty()) {
//all the elements in a queue at one time = one level
        int levelSize = q.size();
        vector<int> levelValues;
        
        for (int i = 0; i < levelSize; ++i) { //loop until all nodes of one level are traversed
            TreeNode* currentNode = q.front();
            q.pop();
            
            levelValues.push_back(currentNode->val);  // Store the node value
            
            if (currentNode->left) {
                q.push(currentNode->left);  // Push left child if it exists
            }
            if (currentNode->right) {
                q.push(currentNode->right);  // Push right child if it exists
            }
        }
        
        ans.push_back(levelValues);  // Store the values of nodes at this level
    }
    
    return ans;
}
};
