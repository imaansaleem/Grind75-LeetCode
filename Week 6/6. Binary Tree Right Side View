/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    vector<int>  BFS(TreeNode* root){
        vector<int> ans;
    
        if (root == nullptr) {
            return ans;  // Return an empty vector since the tree is empty.
        }
        
        queue<TreeNode*> q;
        q.push(root);
        
        while (!q.empty()) {
            int levelSize = q.size();
            vector<int> levelValues;
            
            for (int i = 0; i < levelSize; ++i) {
                TreeNode* currentNode = q.front();
                q.pop();
                
                levelValues.push_back(currentNode->val);  // Store the node value
                
                if (currentNode->left) {
                    q.push(currentNode->left);  // Push left child if it exists
                }
                if (currentNode->right) {
                    q.push(currentNode->right);  // Push right child if it exists
                }
            }
            
            ans.push_back(levelValues[levelValues.size()-1]);  // Store the values of nodes at this level
        }
        
        return ans;
    }

    vector<int> rightSideView(TreeNode* root) {
        return BFS(root);
    }
};

//[1,2,3,4,5,6,null,null,null,9,10, 7]
// [1,2,3,null,5,6,null,4]
