class Solution {
public:

    int coinChange(vector<int>& coins, int amount, vector<int>& dp) {
//if combination is valid
        if (amount == 0) {
            return 0;
        }
//this combination will not be considered as it will never be divided
        if (amount < 0) {
            return -1;
        }
//first check if we have already computed for that particular amount then return from array rather than recomputation
        if (dp[amount] != 0) {
            return dp[amount];
        }

        int mini = INT_MAX;
//check for every available coin
        for (int j = 0; j < coins.size(); j++) {
            int subproblem = coinChange(coins, amount - coins[j], dp);
//check if amount isn't negative
            if (subproblem >= 0) {
                mini = min(mini, subproblem + 1);
            }
        }
//place -1 if INT_MAX is still in mini
        dp[amount] = (mini == INT_MAX) ? -1 : mini;
        return dp[amount];
    }

    int coinChange(vector<int>& coins, int amount) {
//memoization array
        vector<int> dp(amount + 1, 0);
        return coinChange(coins, amount, dp);
    }
};
