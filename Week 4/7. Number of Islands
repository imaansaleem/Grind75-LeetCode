class Solution {
public:

    void dfs(vector<vector<char>>& grid, vector<vector<bool>> &visited, int i, int j){
        if(!visited[i][j]){
            visited[i][j] = 1;

            if(grid[i][j]=='0')
                return;
            
            if(i>0)
                dfs(grid, visited, i-1, j);

            if(j<grid[0].size()-1)
                dfs(grid, visited, i, j+1);
            
            if(i<grid.size()-1)
                dfs(grid, visited, i+1, j);

            if(j>0)
                dfs(grid, visited, i, j-1);
        }

    }

    int numIslands(vector<vector<char>>& grid) {
        int count = 0;
        vector<vector<bool>> visited(grid.size(), vector<bool>(grid[0].size(), 0));
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]=='1' && !visited[i][j]){
                    dfs(grid, visited, i, j);
                    count++;
                }
            }
        }
        return count;
    }
};
