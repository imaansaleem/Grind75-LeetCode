/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root, int &d) {

//if left or right is null then return -1 as we are adding 2, 1 for left 1 for right
//so that -1+1 = 0
        if (root == nullptr) {
            return -1;
        }

        int lheight = diameterOfBinaryTree(root->left, d);
        int rheight = diameterOfBinaryTree(root->right, d);
        d = max(d,lheight + rheight + 2);
        return 1+max(lheight,rheight);
    }

    int diameterOfBinaryTree(TreeNode* root) {
        int d=-999;
        diameterOfBinaryTree(root, d); 
        return d;
    }

};
